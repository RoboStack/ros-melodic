diff --git a/include/pluginlib/class_loader.hpp b/include/pluginlib/class_loader.hpp
index bab830b..7ba3284 100644
--- a/include/pluginlib/class_loader.hpp
+++ b/include/pluginlib/class_loader.hpp
@@ -41,6 +41,7 @@
 #include "pluginlib/exceptions.hpp"
 #include "ros/console.h"
 #include "ros/package.h"
+#include "ros/macros.h"
 #include "tinyxml2.h"  // NOLINT
 
 // Note: pluginlib has traditionally utilized a "lookup name" for classes that does not match its
@@ -90,7 +91,7 @@ public:
    * \return An instance of the class
    * \deprecated use either createInstance() or createUnmanagedInstance()
    */
-  __attribute__((deprecated)) T * createClassInstance(
+  ROS_DEPRECATED T * createClassInstance(
     const std::string & lookup_name,
     bool auto_load = true);
 
diff --git a/include/pluginlib/class_loader_imp.hpp b/include/pluginlib/class_loader_imp.hpp
index 43b3a65..fac3393 100644
--- a/include/pluginlib/class_loader_imp.hpp
+++ b/include/pluginlib/class_loader_imp.hpp
@@ -310,6 +310,10 @@ std::vector<std::string> ClassLoader<T>::getCatkinLibraryPaths()
     boost::split(catkin_prefix_paths, env_catkin_prefix_paths, boost::is_any_of(os_pathsep));
     BOOST_FOREACH(std::string catkin_prefix_path, catkin_prefix_paths) {
       boost::filesystem::path path(catkin_prefix_path);
+#ifdef _WIN32
+      boost::filesystem::path bin("bin");
+      lib_paths.push_back((path / bin).string());
+#endif
       boost::filesystem::path lib("lib");
       lib_paths.push_back((path / lib).string());
     }
@@ -344,12 +348,32 @@ std::vector<std::string> ClassLoader<T>::getAllLibraryPathsToTry(
   std::string stripped_library_name = stripAllButFileFromPath(library_name);
   std::string stripped_library_name_with_extension = stripped_library_name + non_debug_suffix;
 
+  #ifdef _WIN32
+  boost::filesystem::path winlib(library_name);
+  std::string additional_lib, stripped_additional_lib;
+  std::string win_filename = winlib.filename().string();
+  if (win_filename.size() >= 3 && win_filename.substr(0, 3) == "lib")
+  {
+    additional_lib = (winlib.remove_filename() / win_filename.substr(3)).string() + non_debug_suffix;
+    stripped_additional_lib = win_filename.substr(3) + non_debug_suffix;
+  }
+  #endif
+
   const std::string path_separator = getPathSeparator();
 
   for (unsigned int c = 0; c < all_paths_without_extension.size(); c++) {
     std::string current_path = all_paths_without_extension.at(c);
     all_paths.push_back(current_path + path_separator + library_name_with_extension);
     all_paths.push_back(current_path + path_separator + stripped_library_name_with_extension);
+
+    #ifdef _WIN32
+    if (!additional_lib.empty())
+    {
+      all_paths.push_back(current_path + path_separator + additional_lib);
+      all_paths.push_back(current_path + path_separator + stripped_additional_lib);
+    }
+    #endif
+
     // We're in debug mode, try debug libraries as well
     if (debug_library_suffix) {
       all_paths.push_back(
@@ -547,7 +571,11 @@ std::string ClassLoader<T>::getPathSeparator()
 /***************************************************************************/
 {
 #if BOOST_FILESYSTEM_VERSION >= 3
-  return boost::filesystem::path("/").native();
+#  ifdef _WIN32
+     return boost::filesystem::path("/").string();
+#  else
+     return boost::filesystem::path("/").native();
+#  endif
 #else
   return boost::filesystem::path("/").external_file_string();
 #endif
