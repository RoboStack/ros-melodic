diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7c367c9e..378a6ce4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -105,7 +105,7 @@ if(APPLE)
   add_definitions(-D__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES=0)
 endif()
 
-find_package(OpenGL REQUIRED)
+# find_package(OpenGL REQUIRED)
 
 set(CMAKE_AUTOMOC ON)
 set(CMAKE_INCLUDE_CURRENT_DIR ON)
diff --git a/src/python_bindings/CMakeLists.txt b/src/python_bindings/CMakeLists.txt
index aedb7ad0..1f5d1a08 100644
--- a/src/python_bindings/CMakeLists.txt
+++ b/src/python_bindings/CMakeLists.txt
@@ -2,9 +2,9 @@ set(rviz_BINDINGS "")
 
 # TODO(wjwwood): re-enabled PySide2 support when it is fixed.
 # add_subdirectory(shiboken)
-add_subdirectory(sip)
+# add_subdirectory(sip)
 
 message(STATUS "Python binding generators: ${rviz_BINDINGS}")
-if(NOT rviz_BINDINGS)
-  message(FATAL_ERROR "No Python binding generator found.")
-endif()
+# if(NOT rviz_BINDINGS)
+#   message(FATAL_ERROR "No Python binding generator found.")
+# endif()
diff --git a/src/rviz/ogre_helpers/movable_text.h b/src/rviz/ogre_helpers/movable_text.h
index 19d1c31a..4417ef98 100644
--- a/src/rviz/ogre_helpers/movable_text.h
+++ b/src/rviz/ogre_helpers/movable_text.h
@@ -203,7 +203,7 @@ protected:
     return mAABB;
   }
 
-  const Ogre::String& getName() const override
+  const Ogre::String& getName() const
   {
     return mName;
   }
diff --git a/src/rviz/selection/selection_manager.cpp b/src/rviz/selection/selection_manager.cpp
index 954ceded..3ade4df6 100644
--- a/src/rviz/selection/selection_manager.cpp
+++ b/src/rviz/selection/selection_manager.cpp
@@ -588,14 +588,10 @@ void SelectionManager::unpackColors(Ogre::PixelBox& box, V_CollObject& pixels)
   {
     for (int x = 0; x < w; x++)
     {
-      if (size == 4) // In case of a 4-byte color format, we can directly process the 32-bit values
-      {
-        uint32_t pos = (x + y * w) * 4;
-        uint32_t pix_val = *(uint32_t*)((uint8_t*)box.data + pos);
-        pixels.push_back(colorToHandle(box.format, pix_val));
-      }
-      else // otherwise perform "official" transformation into float-based Ogre::ColourValue and back
-        pixels.push_back(colorToHandle(box.getColourAt(x, y, 1)));
+      uint32_t pos = (x + y * w) * size;
+      uint32_t pix_val = 0;
+      memcpy((uint8_t*)&pix_val, (uint8_t*)box.data + pos, size);
+      pixels.push_back(colorToHandle(box.format, pix_val));
     }
   }
 }
